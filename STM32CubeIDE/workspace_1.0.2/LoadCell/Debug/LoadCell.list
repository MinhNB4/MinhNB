
LoadCell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001c9c  08001c9c  00011c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cc0  08001cc0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08001cc0  08001cc0  00011cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001cc8  08001cc8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cc8  08001cc8  00011cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ccc  08001ccc  00011ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000010  08001ce0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08001ce0  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004580  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000104d  00000000  00000000  000245b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000410  00000000  00000000  00025608  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000378  00000000  00000000  00025a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013440  00000000  00000000  00025d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000042d3  00000000  00000000  000391d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000674b1  00000000  00000000  0003d4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a4954  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f04  00000000  00000000  000a49d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c84 	.word	0x08001c84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001c84 	.word	0x08001c84

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_ldivmod>:
 8000608:	b97b      	cbnz	r3, 800062a <__aeabi_ldivmod+0x22>
 800060a:	b972      	cbnz	r2, 800062a <__aeabi_ldivmod+0x22>
 800060c:	2900      	cmp	r1, #0
 800060e:	bfbe      	ittt	lt
 8000610:	2000      	movlt	r0, #0
 8000612:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000616:	e006      	blt.n	8000626 <__aeabi_ldivmod+0x1e>
 8000618:	bf08      	it	eq
 800061a:	2800      	cmpeq	r0, #0
 800061c:	bf1c      	itt	ne
 800061e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000622:	f04f 30ff 	movne.w	r0, #4294967295
 8000626:	f000 b9a7 	b.w	8000978 <__aeabi_idiv0>
 800062a:	f1ad 0c08 	sub.w	ip, sp, #8
 800062e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000632:	2900      	cmp	r1, #0
 8000634:	db09      	blt.n	800064a <__aeabi_ldivmod+0x42>
 8000636:	2b00      	cmp	r3, #0
 8000638:	db1a      	blt.n	8000670 <__aeabi_ldivmod+0x68>
 800063a:	f000 f835 	bl	80006a8 <__udivmoddi4>
 800063e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000646:	b004      	add	sp, #16
 8000648:	4770      	bx	lr
 800064a:	4240      	negs	r0, r0
 800064c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	db1b      	blt.n	800068c <__aeabi_ldivmod+0x84>
 8000654:	f000 f828 	bl	80006a8 <__udivmoddi4>
 8000658:	f8dd e004 	ldr.w	lr, [sp, #4]
 800065c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000660:	b004      	add	sp, #16
 8000662:	4240      	negs	r0, r0
 8000664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000668:	4252      	negs	r2, r2
 800066a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800066e:	4770      	bx	lr
 8000670:	4252      	negs	r2, r2
 8000672:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000676:	f000 f817 	bl	80006a8 <__udivmoddi4>
 800067a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800067e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000682:	b004      	add	sp, #16
 8000684:	4240      	negs	r0, r0
 8000686:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800068a:	4770      	bx	lr
 800068c:	4252      	negs	r2, r2
 800068e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000692:	f000 f809 	bl	80006a8 <__udivmoddi4>
 8000696:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800069e:	b004      	add	sp, #16
 80006a0:	4252      	negs	r2, r2
 80006a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006a6:	4770      	bx	lr

080006a8 <__udivmoddi4>:
 80006a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ac:	468c      	mov	ip, r1
 80006ae:	4604      	mov	r4, r0
 80006b0:	9e08      	ldr	r6, [sp, #32]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d14b      	bne.n	800074e <__udivmoddi4+0xa6>
 80006b6:	428a      	cmp	r2, r1
 80006b8:	4615      	mov	r5, r2
 80006ba:	d967      	bls.n	800078c <__udivmoddi4+0xe4>
 80006bc:	fab2 f282 	clz	r2, r2
 80006c0:	b14a      	cbz	r2, 80006d6 <__udivmoddi4+0x2e>
 80006c2:	f1c2 0720 	rsb	r7, r2, #32
 80006c6:	fa01 f302 	lsl.w	r3, r1, r2
 80006ca:	fa20 f707 	lsr.w	r7, r0, r7
 80006ce:	4095      	lsls	r5, r2
 80006d0:	ea47 0c03 	orr.w	ip, r7, r3
 80006d4:	4094      	lsls	r4, r2
 80006d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006da:	fbbc f7fe 	udiv	r7, ip, lr
 80006de:	fa1f f885 	uxth.w	r8, r5
 80006e2:	fb0e c317 	mls	r3, lr, r7, ip
 80006e6:	fb07 f908 	mul.w	r9, r7, r8
 80006ea:	0c21      	lsrs	r1, r4, #16
 80006ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006f0:	4599      	cmp	r9, r3
 80006f2:	d909      	bls.n	8000708 <__udivmoddi4+0x60>
 80006f4:	18eb      	adds	r3, r5, r3
 80006f6:	f107 31ff 	add.w	r1, r7, #4294967295
 80006fa:	f080 811c 	bcs.w	8000936 <__udivmoddi4+0x28e>
 80006fe:	4599      	cmp	r9, r3
 8000700:	f240 8119 	bls.w	8000936 <__udivmoddi4+0x28e>
 8000704:	3f02      	subs	r7, #2
 8000706:	442b      	add	r3, r5
 8000708:	eba3 0309 	sub.w	r3, r3, r9
 800070c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000710:	fb0e 3310 	mls	r3, lr, r0, r3
 8000714:	fb00 f108 	mul.w	r1, r0, r8
 8000718:	b2a4      	uxth	r4, r4
 800071a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800071e:	42a1      	cmp	r1, r4
 8000720:	d909      	bls.n	8000736 <__udivmoddi4+0x8e>
 8000722:	192c      	adds	r4, r5, r4
 8000724:	f100 33ff 	add.w	r3, r0, #4294967295
 8000728:	f080 8107 	bcs.w	800093a <__udivmoddi4+0x292>
 800072c:	42a1      	cmp	r1, r4
 800072e:	f240 8104 	bls.w	800093a <__udivmoddi4+0x292>
 8000732:	3802      	subs	r0, #2
 8000734:	442c      	add	r4, r5
 8000736:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800073a:	2700      	movs	r7, #0
 800073c:	1a64      	subs	r4, r4, r1
 800073e:	b11e      	cbz	r6, 8000748 <__udivmoddi4+0xa0>
 8000740:	2300      	movs	r3, #0
 8000742:	40d4      	lsrs	r4, r2
 8000744:	e9c6 4300 	strd	r4, r3, [r6]
 8000748:	4639      	mov	r1, r7
 800074a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074e:	428b      	cmp	r3, r1
 8000750:	d909      	bls.n	8000766 <__udivmoddi4+0xbe>
 8000752:	2e00      	cmp	r6, #0
 8000754:	f000 80ec 	beq.w	8000930 <__udivmoddi4+0x288>
 8000758:	2700      	movs	r7, #0
 800075a:	e9c6 0100 	strd	r0, r1, [r6]
 800075e:	4638      	mov	r0, r7
 8000760:	4639      	mov	r1, r7
 8000762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000766:	fab3 f783 	clz	r7, r3
 800076a:	2f00      	cmp	r7, #0
 800076c:	d148      	bne.n	8000800 <__udivmoddi4+0x158>
 800076e:	428b      	cmp	r3, r1
 8000770:	d302      	bcc.n	8000778 <__udivmoddi4+0xd0>
 8000772:	4282      	cmp	r2, r0
 8000774:	f200 80fb 	bhi.w	800096e <__udivmoddi4+0x2c6>
 8000778:	1a84      	subs	r4, r0, r2
 800077a:	eb61 0303 	sbc.w	r3, r1, r3
 800077e:	2001      	movs	r0, #1
 8000780:	469c      	mov	ip, r3
 8000782:	2e00      	cmp	r6, #0
 8000784:	d0e0      	beq.n	8000748 <__udivmoddi4+0xa0>
 8000786:	e9c6 4c00 	strd	r4, ip, [r6]
 800078a:	e7dd      	b.n	8000748 <__udivmoddi4+0xa0>
 800078c:	b902      	cbnz	r2, 8000790 <__udivmoddi4+0xe8>
 800078e:	deff      	udf	#255	; 0xff
 8000790:	fab2 f282 	clz	r2, r2
 8000794:	2a00      	cmp	r2, #0
 8000796:	f040 808f 	bne.w	80008b8 <__udivmoddi4+0x210>
 800079a:	2701      	movs	r7, #1
 800079c:	1b49      	subs	r1, r1, r5
 800079e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80007a2:	fa1f f985 	uxth.w	r9, r5
 80007a6:	fbb1 fef8 	udiv	lr, r1, r8
 80007aa:	fb08 111e 	mls	r1, r8, lr, r1
 80007ae:	fb09 f00e 	mul.w	r0, r9, lr
 80007b2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80007b6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80007ba:	4298      	cmp	r0, r3
 80007bc:	d907      	bls.n	80007ce <__udivmoddi4+0x126>
 80007be:	18eb      	adds	r3, r5, r3
 80007c0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80007c4:	d202      	bcs.n	80007cc <__udivmoddi4+0x124>
 80007c6:	4298      	cmp	r0, r3
 80007c8:	f200 80cd 	bhi.w	8000966 <__udivmoddi4+0x2be>
 80007cc:	468e      	mov	lr, r1
 80007ce:	1a1b      	subs	r3, r3, r0
 80007d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d4:	fb08 3310 	mls	r3, r8, r0, r3
 80007d8:	fb09 f900 	mul.w	r9, r9, r0
 80007dc:	b2a4      	uxth	r4, r4
 80007de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007e2:	45a1      	cmp	r9, r4
 80007e4:	d907      	bls.n	80007f6 <__udivmoddi4+0x14e>
 80007e6:	192c      	adds	r4, r5, r4
 80007e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ec:	d202      	bcs.n	80007f4 <__udivmoddi4+0x14c>
 80007ee:	45a1      	cmp	r9, r4
 80007f0:	f200 80b6 	bhi.w	8000960 <__udivmoddi4+0x2b8>
 80007f4:	4618      	mov	r0, r3
 80007f6:	eba4 0409 	sub.w	r4, r4, r9
 80007fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80007fe:	e79e      	b.n	800073e <__udivmoddi4+0x96>
 8000800:	f1c7 0520 	rsb	r5, r7, #32
 8000804:	40bb      	lsls	r3, r7
 8000806:	fa22 fc05 	lsr.w	ip, r2, r5
 800080a:	ea4c 0c03 	orr.w	ip, ip, r3
 800080e:	fa21 f405 	lsr.w	r4, r1, r5
 8000812:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000816:	fbb4 f9fe 	udiv	r9, r4, lr
 800081a:	fa1f f88c 	uxth.w	r8, ip
 800081e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000822:	fa20 f305 	lsr.w	r3, r0, r5
 8000826:	40b9      	lsls	r1, r7
 8000828:	fb09 fa08 	mul.w	sl, r9, r8
 800082c:	4319      	orrs	r1, r3
 800082e:	0c0b      	lsrs	r3, r1, #16
 8000830:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000834:	45a2      	cmp	sl, r4
 8000836:	fa02 f207 	lsl.w	r2, r2, r7
 800083a:	fa00 f307 	lsl.w	r3, r0, r7
 800083e:	d90b      	bls.n	8000858 <__udivmoddi4+0x1b0>
 8000840:	eb1c 0404 	adds.w	r4, ip, r4
 8000844:	f109 30ff 	add.w	r0, r9, #4294967295
 8000848:	f080 8088 	bcs.w	800095c <__udivmoddi4+0x2b4>
 800084c:	45a2      	cmp	sl, r4
 800084e:	f240 8085 	bls.w	800095c <__udivmoddi4+0x2b4>
 8000852:	f1a9 0902 	sub.w	r9, r9, #2
 8000856:	4464      	add	r4, ip
 8000858:	eba4 040a 	sub.w	r4, r4, sl
 800085c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000860:	fb0e 4410 	mls	r4, lr, r0, r4
 8000864:	fb00 fa08 	mul.w	sl, r0, r8
 8000868:	b289      	uxth	r1, r1
 800086a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800086e:	45a2      	cmp	sl, r4
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0x1dc>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 31ff 	add.w	r1, r0, #4294967295
 800087a:	d26b      	bcs.n	8000954 <__udivmoddi4+0x2ac>
 800087c:	45a2      	cmp	sl, r4
 800087e:	d969      	bls.n	8000954 <__udivmoddi4+0x2ac>
 8000880:	3802      	subs	r0, #2
 8000882:	4464      	add	r4, ip
 8000884:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000888:	fba0 8902 	umull	r8, r9, r0, r2
 800088c:	eba4 040a 	sub.w	r4, r4, sl
 8000890:	454c      	cmp	r4, r9
 8000892:	4641      	mov	r1, r8
 8000894:	46ce      	mov	lr, r9
 8000896:	d354      	bcc.n	8000942 <__udivmoddi4+0x29a>
 8000898:	d051      	beq.n	800093e <__udivmoddi4+0x296>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d069      	beq.n	8000972 <__udivmoddi4+0x2ca>
 800089e:	1a5a      	subs	r2, r3, r1
 80008a0:	eb64 040e 	sbc.w	r4, r4, lr
 80008a4:	fa04 f505 	lsl.w	r5, r4, r5
 80008a8:	fa22 f307 	lsr.w	r3, r2, r7
 80008ac:	40fc      	lsrs	r4, r7
 80008ae:	431d      	orrs	r5, r3
 80008b0:	e9c6 5400 	strd	r5, r4, [r6]
 80008b4:	2700      	movs	r7, #0
 80008b6:	e747      	b.n	8000748 <__udivmoddi4+0xa0>
 80008b8:	4095      	lsls	r5, r2
 80008ba:	f1c2 0320 	rsb	r3, r2, #32
 80008be:	fa21 f003 	lsr.w	r0, r1, r3
 80008c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80008c6:	fbb0 f7f8 	udiv	r7, r0, r8
 80008ca:	fa1f f985 	uxth.w	r9, r5
 80008ce:	fb08 0017 	mls	r0, r8, r7, r0
 80008d2:	fa24 f303 	lsr.w	r3, r4, r3
 80008d6:	4091      	lsls	r1, r2
 80008d8:	fb07 fc09 	mul.w	ip, r7, r9
 80008dc:	430b      	orrs	r3, r1
 80008de:	0c19      	lsrs	r1, r3, #16
 80008e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008e4:	458c      	cmp	ip, r1
 80008e6:	fa04 f402 	lsl.w	r4, r4, r2
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x254>
 80008ec:	1869      	adds	r1, r5, r1
 80008ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80008f2:	d231      	bcs.n	8000958 <__udivmoddi4+0x2b0>
 80008f4:	458c      	cmp	ip, r1
 80008f6:	d92f      	bls.n	8000958 <__udivmoddi4+0x2b0>
 80008f8:	3f02      	subs	r7, #2
 80008fa:	4429      	add	r1, r5
 80008fc:	eba1 010c 	sub.w	r1, r1, ip
 8000900:	fbb1 f0f8 	udiv	r0, r1, r8
 8000904:	fb08 1c10 	mls	ip, r8, r0, r1
 8000908:	fb00 fe09 	mul.w	lr, r0, r9
 800090c:	b299      	uxth	r1, r3
 800090e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000912:	458e      	cmp	lr, r1
 8000914:	d907      	bls.n	8000926 <__udivmoddi4+0x27e>
 8000916:	1869      	adds	r1, r5, r1
 8000918:	f100 33ff 	add.w	r3, r0, #4294967295
 800091c:	d218      	bcs.n	8000950 <__udivmoddi4+0x2a8>
 800091e:	458e      	cmp	lr, r1
 8000920:	d916      	bls.n	8000950 <__udivmoddi4+0x2a8>
 8000922:	3802      	subs	r0, #2
 8000924:	4429      	add	r1, r5
 8000926:	eba1 010e 	sub.w	r1, r1, lr
 800092a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800092e:	e73a      	b.n	80007a6 <__udivmoddi4+0xfe>
 8000930:	4637      	mov	r7, r6
 8000932:	4630      	mov	r0, r6
 8000934:	e708      	b.n	8000748 <__udivmoddi4+0xa0>
 8000936:	460f      	mov	r7, r1
 8000938:	e6e6      	b.n	8000708 <__udivmoddi4+0x60>
 800093a:	4618      	mov	r0, r3
 800093c:	e6fb      	b.n	8000736 <__udivmoddi4+0x8e>
 800093e:	4543      	cmp	r3, r8
 8000940:	d2ab      	bcs.n	800089a <__udivmoddi4+0x1f2>
 8000942:	ebb8 0102 	subs.w	r1, r8, r2
 8000946:	eb69 020c 	sbc.w	r2, r9, ip
 800094a:	3801      	subs	r0, #1
 800094c:	4696      	mov	lr, r2
 800094e:	e7a4      	b.n	800089a <__udivmoddi4+0x1f2>
 8000950:	4618      	mov	r0, r3
 8000952:	e7e8      	b.n	8000926 <__udivmoddi4+0x27e>
 8000954:	4608      	mov	r0, r1
 8000956:	e795      	b.n	8000884 <__udivmoddi4+0x1dc>
 8000958:	4607      	mov	r7, r0
 800095a:	e7cf      	b.n	80008fc <__udivmoddi4+0x254>
 800095c:	4681      	mov	r9, r0
 800095e:	e77b      	b.n	8000858 <__udivmoddi4+0x1b0>
 8000960:	3802      	subs	r0, #2
 8000962:	442c      	add	r4, r5
 8000964:	e747      	b.n	80007f6 <__udivmoddi4+0x14e>
 8000966:	f1ae 0e02 	sub.w	lr, lr, #2
 800096a:	442b      	add	r3, r5
 800096c:	e72f      	b.n	80007ce <__udivmoddi4+0x126>
 800096e:	4638      	mov	r0, r7
 8000970:	e707      	b.n	8000782 <__udivmoddi4+0xda>
 8000972:	4637      	mov	r7, r6
 8000974:	e6e8      	b.n	8000748 <__udivmoddi4+0xa0>
 8000976:	bf00      	nop

08000978 <__aeabi_idiv0>:
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f929 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	2000      	movs	r0, #0
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f001 f892 	bl	8001ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f933 	bl	8000c32 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f909 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000000c 	.word	0x2000000c
 8000a00:	20000004 	.word	0x20000004
 8000a04:	20000000 	.word	0x20000000

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000004 	.word	0x20000004
 8000a28:	20000034 	.word	0x20000034

08000a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000034 	.word	0x20000034

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff fff0 	bl	8000a2c <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_Delay+0x40>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a66:	bf00      	nop
 8000a68:	f7ff ffe0 	bl	8000a2c <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000004 	.word	0x20000004

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff90 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff49 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff5e 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff90 	bl	8000b3c <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5f 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffb0 	bl	8000ba0 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b08b      	sub	sp, #44	; 0x2c
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5e:	e127      	b.n	8000eb0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c60:	2201      	movs	r2, #1
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	f040 8116 	bne.w	8000eaa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b12      	cmp	r3, #18
 8000c84:	d034      	beq.n	8000cf0 <HAL_GPIO_Init+0xa4>
 8000c86:	2b12      	cmp	r3, #18
 8000c88:	d80d      	bhi.n	8000ca6 <HAL_GPIO_Init+0x5a>
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d02b      	beq.n	8000ce6 <HAL_GPIO_Init+0x9a>
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d804      	bhi.n	8000c9c <HAL_GPIO_Init+0x50>
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d031      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d01c      	beq.n	8000cd4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c9a:	e048      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d043      	beq.n	8000d28 <HAL_GPIO_Init+0xdc>
 8000ca0:	2b11      	cmp	r3, #17
 8000ca2:	d01b      	beq.n	8000cdc <HAL_GPIO_Init+0x90>
          break;
 8000ca4:	e043      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ca6:	4a89      	ldr	r2, [pc, #548]	; (8000ecc <HAL_GPIO_Init+0x280>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d026      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000cac:	4a87      	ldr	r2, [pc, #540]	; (8000ecc <HAL_GPIO_Init+0x280>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d806      	bhi.n	8000cc0 <HAL_GPIO_Init+0x74>
 8000cb2:	4a87      	ldr	r2, [pc, #540]	; (8000ed0 <HAL_GPIO_Init+0x284>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d020      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000cb8:	4a86      	ldr	r2, [pc, #536]	; (8000ed4 <HAL_GPIO_Init+0x288>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d01d      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
          break;
 8000cbe:	e036      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cc0:	4a85      	ldr	r2, [pc, #532]	; (8000ed8 <HAL_GPIO_Init+0x28c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d019      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000cc6:	4a85      	ldr	r2, [pc, #532]	; (8000edc <HAL_GPIO_Init+0x290>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d016      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
 8000ccc:	4a84      	ldr	r2, [pc, #528]	; (8000ee0 <HAL_GPIO_Init+0x294>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d013      	beq.n	8000cfa <HAL_GPIO_Init+0xae>
          break;
 8000cd2:	e02c      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	623b      	str	r3, [r7, #32]
          break;
 8000cda:	e028      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	623b      	str	r3, [r7, #32]
          break;
 8000ce4:	e023      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	3308      	adds	r3, #8
 8000cec:	623b      	str	r3, [r7, #32]
          break;
 8000cee:	e01e      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	330c      	adds	r3, #12
 8000cf6:	623b      	str	r3, [r7, #32]
          break;
 8000cf8:	e019      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d02:	2304      	movs	r3, #4
 8000d04:	623b      	str	r3, [r7, #32]
          break;
 8000d06:	e012      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d105      	bne.n	8000d1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	611a      	str	r2, [r3, #16]
          break;
 8000d1a:	e008      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	615a      	str	r2, [r3, #20]
          break;
 8000d26:	e002      	b.n	8000d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
          break;
 8000d2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	2bff      	cmp	r3, #255	; 0xff
 8000d32:	d801      	bhi.n	8000d38 <HAL_GPIO_Init+0xec>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	e001      	b.n	8000d3c <HAL_GPIO_Init+0xf0>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	2bff      	cmp	r3, #255	; 0xff
 8000d42:	d802      	bhi.n	8000d4a <HAL_GPIO_Init+0xfe>
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	e002      	b.n	8000d50 <HAL_GPIO_Init+0x104>
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	3b08      	subs	r3, #8
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	210f      	movs	r1, #15
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	401a      	ands	r2, r3
 8000d62:	6a39      	ldr	r1, [r7, #32]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 8096 	beq.w	8000eaa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7e:	4b59      	ldr	r3, [pc, #356]	; (8000ee4 <HAL_GPIO_Init+0x298>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a58      	ldr	r2, [pc, #352]	; (8000ee4 <HAL_GPIO_Init+0x298>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b56      	ldr	r3, [pc, #344]	; (8000ee4 <HAL_GPIO_Init+0x298>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d96:	4a54      	ldr	r2, [pc, #336]	; (8000ee8 <HAL_GPIO_Init+0x29c>)
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4013      	ands	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4b      	ldr	r2, [pc, #300]	; (8000eec <HAL_GPIO_Init+0x2a0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0x19e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <HAL_GPIO_Init+0x2a4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00d      	beq.n	8000de6 <HAL_GPIO_Init+0x19a>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a49      	ldr	r2, [pc, #292]	; (8000ef4 <HAL_GPIO_Init+0x2a8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_Init+0x196>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a48      	ldr	r2, [pc, #288]	; (8000ef8 <HAL_GPIO_Init+0x2ac>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_GPIO_Init+0x192>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x1a0>
 8000dde:	2304      	movs	r3, #4
 8000de0:	e004      	b.n	8000dec <HAL_GPIO_Init+0x1a0>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e002      	b.n	8000dec <HAL_GPIO_Init+0x1a0>
 8000de6:	2301      	movs	r3, #1
 8000de8:	e000      	b.n	8000dec <HAL_GPIO_Init+0x1a0>
 8000dea:	2300      	movs	r3, #0
 8000dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dee:	f002 0203 	and.w	r2, r2, #3
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	4093      	lsls	r3, r2
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dfc:	493a      	ldr	r1, [pc, #232]	; (8000ee8 <HAL_GPIO_Init+0x29c>)
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	3302      	adds	r3, #2
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e16:	4b39      	ldr	r3, [pc, #228]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4938      	ldr	r1, [pc, #224]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	600b      	str	r3, [r1, #0]
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e24:	4b35      	ldr	r3, [pc, #212]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4933      	ldr	r1, [pc, #204]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d006      	beq.n	8000e4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	492e      	ldr	r1, [pc, #184]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	604b      	str	r3, [r1, #4]
 8000e4a:	e006      	b.n	8000e5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	4929      	ldr	r1, [pc, #164]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	4924      	ldr	r1, [pc, #144]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	608b      	str	r3, [r1, #8]
 8000e72:	e006      	b.n	8000e82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	491f      	ldr	r1, [pc, #124]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	491a      	ldr	r1, [pc, #104]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60cb      	str	r3, [r1, #12]
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4915      	ldr	r1, [pc, #84]	; (8000efc <HAL_GPIO_Init+0x2b0>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	3301      	adds	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f47f aed0 	bne.w	8000c60 <HAL_GPIO_Init+0x14>
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	372c      	adds	r7, #44	; 0x2c
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	10210000 	.word	0x10210000
 8000ed0:	10110000 	.word	0x10110000
 8000ed4:	10120000 	.word	0x10120000
 8000ed8:	10310000 	.word	0x10310000
 8000edc:	10320000 	.word	0x10320000
 8000ee0:	10220000 	.word	0x10220000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	40010c00 	.word	0x40010c00
 8000ef4:	40011000 	.word	0x40011000
 8000ef8:	40011400 	.word	0x40011400
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	887b      	ldrh	r3, [r7, #2]
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e001      	b.n	8000f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	807b      	strh	r3, [r7, #2]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f3e:	787b      	ldrb	r3, [r7, #1]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f44:	887a      	ldrh	r2, [r7, #2]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f4a:	e003      	b.n	8000f54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	041a      	lsls	r2, r3, #16
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	611a      	str	r2, [r3, #16]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
	...

08000f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e26c      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8087 	beq.w	800108e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f80:	4b92      	ldr	r3, [pc, #584]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 030c 	and.w	r3, r3, #12
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d00c      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f8c:	4b8f      	ldr	r3, [pc, #572]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 030c 	and.w	r3, r3, #12
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d112      	bne.n	8000fbe <HAL_RCC_OscConfig+0x5e>
 8000f98:	4b8c      	ldr	r3, [pc, #560]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa4:	d10b      	bne.n	8000fbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa6:	4b89      	ldr	r3, [pc, #548]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d06c      	beq.n	800108c <HAL_RCC_OscConfig+0x12c>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d168      	bne.n	800108c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e246      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc6:	d106      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x76>
 8000fc8:	4b80      	ldr	r3, [pc, #512]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a7f      	ldr	r2, [pc, #508]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8000fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	e02e      	b.n	8001034 <HAL_RCC_OscConfig+0xd4>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x98>
 8000fde:	4b7b      	ldr	r3, [pc, #492]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a7a      	ldr	r2, [pc, #488]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b78      	ldr	r3, [pc, #480]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a77      	ldr	r2, [pc, #476]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e01d      	b.n	8001034 <HAL_RCC_OscConfig+0xd4>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0xbc>
 8001002:	4b72      	ldr	r3, [pc, #456]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a71      	ldr	r2, [pc, #452]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8001008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	4b6f      	ldr	r3, [pc, #444]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a6e      	ldr	r2, [pc, #440]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8001014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e00b      	b.n	8001034 <HAL_RCC_OscConfig+0xd4>
 800101c:	4b6b      	ldr	r3, [pc, #428]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a6a      	ldr	r2, [pc, #424]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8001022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b68      	ldr	r3, [pc, #416]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a67      	ldr	r2, [pc, #412]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 800102e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001032:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d013      	beq.n	8001064 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fcf6 	bl	8000a2c <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001044:	f7ff fcf2 	bl	8000a2c <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b64      	cmp	r3, #100	; 0x64
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e1fa      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	4b5d      	ldr	r3, [pc, #372]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f0      	beq.n	8001044 <HAL_RCC_OscConfig+0xe4>
 8001062:	e014      	b.n	800108e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fce2 	bl	8000a2c <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800106c:	f7ff fcde 	bl	8000a2c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b64      	cmp	r3, #100	; 0x64
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e1e6      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	4b53      	ldr	r3, [pc, #332]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x10c>
 800108a:	e000      	b.n	800108e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d063      	beq.n	8001162 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800109a:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00b      	beq.n	80010be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010a6:	4b49      	ldr	r3, [pc, #292]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d11c      	bne.n	80010ec <HAL_RCC_OscConfig+0x18c>
 80010b2:	4b46      	ldr	r3, [pc, #280]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d116      	bne.n	80010ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010be:	4b43      	ldr	r3, [pc, #268]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d005      	beq.n	80010d6 <HAL_RCC_OscConfig+0x176>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d001      	beq.n	80010d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e1ba      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4939      	ldr	r1, [pc, #228]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ea:	e03a      	b.n	8001162 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d020      	beq.n	8001136 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f4:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <HAL_RCC_OscConfig+0x270>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fa:	f7ff fc97 	bl	8000a2c <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001102:	f7ff fc93 	bl	8000a2c <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e19b      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001120:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4927      	ldr	r1, [pc, #156]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8001130:	4313      	orrs	r3, r2
 8001132:	600b      	str	r3, [r1, #0]
 8001134:	e015      	b.n	8001162 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <HAL_RCC_OscConfig+0x270>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fc76 	bl	8000a2c <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001144:	f7ff fc72 	bl	8000a2c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e17a      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	d03a      	beq.n	80011e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d019      	beq.n	80011aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_RCC_OscConfig+0x274>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117c:	f7ff fc56 	bl	8000a2c <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001184:	f7ff fc52 	bl	8000a2c <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e15a      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_RCC_OscConfig+0x26c>)
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f000 fab2 	bl	800170c <RCC_Delay>
 80011a8:	e01c      	b.n	80011e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_RCC_OscConfig+0x274>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b0:	f7ff fc3c 	bl	8000a2c <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b6:	e00f      	b.n	80011d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b8:	f7ff fc38 	bl	8000a2c <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d908      	bls.n	80011d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e140      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000
 80011d0:	42420000 	.word	0x42420000
 80011d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d8:	4b9e      	ldr	r3, [pc, #632]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1e9      	bne.n	80011b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80a6 	beq.w	800133e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011f6:	4b97      	ldr	r3, [pc, #604]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10d      	bne.n	800121e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b94      	ldr	r3, [pc, #592]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a93      	ldr	r2, [pc, #588]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b91      	ldr	r3, [pc, #580]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800121a:	2301      	movs	r3, #1
 800121c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121e:	4b8e      	ldr	r3, [pc, #568]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001226:	2b00      	cmp	r3, #0
 8001228:	d118      	bne.n	800125c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122a:	4b8b      	ldr	r3, [pc, #556]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a8a      	ldr	r2, [pc, #552]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001236:	f7ff fbf9 	bl	8000a2c <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123e:	f7ff fbf5 	bl	8000a2c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b64      	cmp	r3, #100	; 0x64
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e0fd      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001250:	4b81      	ldr	r3, [pc, #516]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d106      	bne.n	8001272 <HAL_RCC_OscConfig+0x312>
 8001264:	4b7b      	ldr	r3, [pc, #492]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4a7a      	ldr	r2, [pc, #488]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6213      	str	r3, [r2, #32]
 8001270:	e02d      	b.n	80012ce <HAL_RCC_OscConfig+0x36e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x334>
 800127a:	4b76      	ldr	r3, [pc, #472]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4a75      	ldr	r2, [pc, #468]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 8001280:	f023 0301 	bic.w	r3, r3, #1
 8001284:	6213      	str	r3, [r2, #32]
 8001286:	4b73      	ldr	r3, [pc, #460]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a72      	ldr	r2, [pc, #456]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 800128c:	f023 0304 	bic.w	r3, r3, #4
 8001290:	6213      	str	r3, [r2, #32]
 8001292:	e01c      	b.n	80012ce <HAL_RCC_OscConfig+0x36e>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b05      	cmp	r3, #5
 800129a:	d10c      	bne.n	80012b6 <HAL_RCC_OscConfig+0x356>
 800129c:	4b6d      	ldr	r3, [pc, #436]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4a6c      	ldr	r2, [pc, #432]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6213      	str	r3, [r2, #32]
 80012a8:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4a69      	ldr	r2, [pc, #420]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6213      	str	r3, [r2, #32]
 80012b4:	e00b      	b.n	80012ce <HAL_RCC_OscConfig+0x36e>
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4a66      	ldr	r2, [pc, #408]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	6213      	str	r3, [r2, #32]
 80012c2:	4b64      	ldr	r3, [pc, #400]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	4a63      	ldr	r2, [pc, #396]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	f023 0304 	bic.w	r3, r3, #4
 80012cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d015      	beq.n	8001302 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fba9 	bl	8000a2c <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012dc:	e00a      	b.n	80012f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012de:	f7ff fba5 	bl	8000a2c <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0ab      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f4:	4b57      	ldr	r3, [pc, #348]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0ee      	beq.n	80012de <HAL_RCC_OscConfig+0x37e>
 8001300:	e014      	b.n	800132c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001302:	f7ff fb93 	bl	8000a2c <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001308:	e00a      	b.n	8001320 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130a:	f7ff fb8f 	bl	8000a2c <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	f241 3288 	movw	r2, #5000	; 0x1388
 8001318:	4293      	cmp	r3, r2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e095      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001320:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1ee      	bne.n	800130a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d105      	bne.n	800133e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001332:	4b48      	ldr	r3, [pc, #288]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a47      	ldr	r2, [pc, #284]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800133c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 8081 	beq.w	800144a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001348:	4b42      	ldr	r3, [pc, #264]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 030c 	and.w	r3, r3, #12
 8001350:	2b08      	cmp	r3, #8
 8001352:	d061      	beq.n	8001418 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d146      	bne.n	80013ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135c:	4b3f      	ldr	r3, [pc, #252]	; (800145c <HAL_RCC_OscConfig+0x4fc>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7ff fb63 	bl	8000a2c <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136a:	f7ff fb5f 	bl	8000a2c <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e067      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137c:	4b35      	ldr	r3, [pc, #212]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f0      	bne.n	800136a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001390:	d108      	bne.n	80013a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001392:	4b30      	ldr	r3, [pc, #192]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	492d      	ldr	r1, [pc, #180]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a4:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a19      	ldr	r1, [r3, #32]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	430b      	orrs	r3, r1
 80013b6:	4927      	ldr	r1, [pc, #156]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_RCC_OscConfig+0x4fc>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff fb33 	bl	8000a2c <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ca:	f7ff fb2f 	bl	8000a2c <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e037      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x46a>
 80013e8:	e02f      	b.n	800144a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_RCC_OscConfig+0x4fc>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb1c 	bl	8000a2c <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff fb18 	bl	8000a2c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e020      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x498>
 8001416:	e018      	b.n	800144a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e013      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	429a      	cmp	r2, r3
 8001436:	d106      	bne.n	8001446 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001442:	429a      	cmp	r2, r3
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40021000 	.word	0x40021000
 8001458:	40007000 	.word	0x40007000
 800145c:	42420060 	.word	0x42420060

08001460 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0d0      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001474:	4b6a      	ldr	r3, [pc, #424]	; (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d910      	bls.n	80014a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	4b67      	ldr	r3, [pc, #412]	; (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 0207 	bic.w	r2, r3, #7
 800148a:	4965      	ldr	r1, [pc, #404]	; (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001492:	4b63      	ldr	r3, [pc, #396]	; (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0b8      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d020      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014bc:	4b59      	ldr	r3, [pc, #356]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4a58      	ldr	r2, [pc, #352]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d4:	4b53      	ldr	r3, [pc, #332]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a52      	ldr	r2, [pc, #328]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e0:	4b50      	ldr	r3, [pc, #320]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	494d      	ldr	r1, [pc, #308]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d040      	beq.n	8001580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d107      	bne.n	8001516 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b47      	ldr	r3, [pc, #284]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d115      	bne.n	800153e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e07f      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d107      	bne.n	800152e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151e:	4b41      	ldr	r3, [pc, #260]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d109      	bne.n	800153e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e073      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152e:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e06b      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153e:	4b39      	ldr	r3, [pc, #228]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f023 0203 	bic.w	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4936      	ldr	r1, [pc, #216]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001550:	f7ff fa6c 	bl	8000a2c <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001556:	e00a      	b.n	800156e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001558:	f7ff fa68 	bl	8000a2c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	; 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e053      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 020c 	and.w	r2, r3, #12
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	429a      	cmp	r2, r3
 800157e:	d1eb      	bne.n	8001558 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001580:	4b27      	ldr	r3, [pc, #156]	; (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d210      	bcs.n	80015b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158e:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 0207 	bic.w	r2, r3, #7
 8001596:	4922      	ldr	r1, [pc, #136]	; (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e032      	b.n	8001616 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4916      	ldr	r1, [pc, #88]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	490e      	ldr	r1, [pc, #56]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ee:	f000 f821 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 80015f2:	4601      	mov	r1, r0
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_RCC_ClockConfig+0x1c8>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	fa21 f303 	lsr.w	r3, r1, r3
 8001606:	4a09      	ldr	r2, [pc, #36]	; (800162c <HAL_RCC_ClockConfig+0x1cc>)
 8001608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_ClockConfig+0x1d0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff f9ca 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000
 8001624:	40021000 	.word	0x40021000
 8001628:	08001cb0 	.word	0x08001cb0
 800162c:	2000000c 	.word	0x2000000c
 8001630:	20000000 	.word	0x20000000

08001634 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001634:	b490      	push	{r4, r7}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800163c:	1d3c      	adds	r4, r7, #4
 800163e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001644:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b04      	cmp	r3, #4
 800166c:	d002      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x40>
 800166e:	2b08      	cmp	r3, #8
 8001670:	d003      	beq.n	800167a <HAL_RCC_GetSysClockFreq+0x46>
 8001672:	e02d      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001676:	623b      	str	r3, [r7, #32]
      break;
 8001678:	e02d      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	0c9b      	lsrs	r3, r3, #18
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001686:	4413      	add	r3, r2
 8001688:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800168c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	0c5b      	lsrs	r3, r3, #17
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016a6:	4413      	add	r3, r2
 80016a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016b2:	fb02 f203 	mul.w	r2, r2, r3
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
 80016be:	e004      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	623b      	str	r3, [r7, #32]
      break;
 80016ce:	e002      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016d2:	623b      	str	r3, [r7, #32]
      break;
 80016d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016d6:	6a3b      	ldr	r3, [r7, #32]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc90      	pop	{r4, r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	08001c9c 	.word	0x08001c9c
 80016e8:	08001cac 	.word	0x08001cac
 80016ec:	40021000 	.word	0x40021000
 80016f0:	007a1200 	.word	0x007a1200
 80016f4:	003d0900 	.word	0x003d0900

080016f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <HAL_RCC_GetHCLKFreq+0x10>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	2000000c 	.word	0x2000000c

0800170c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <RCC_Delay+0x34>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <RCC_Delay+0x38>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0a5b      	lsrs	r3, r3, #9
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001728:	bf00      	nop
  }
  while (Delay --);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1e5a      	subs	r2, r3, #1
 800172e:	60fa      	str	r2, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f9      	bne.n	8001728 <RCC_Delay+0x1c>
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2000000c 	.word	0x2000000c
 8001744:	10624dd3 	.word	0x10624dd3

08001748 <DWT_Delay_us>:
uint32_t reading1;
static TIM_TypeDef *timer;
float gram = 151962.0f;

void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <DWT_Delay_us+0x3c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	60fb      	str	r3, [r7, #12]
 /* Go to number of cycles for system */
 microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001756:	f7ff ffcf 	bl	80016f8 <HAL_RCC_GetHCLKFreq>
 800175a:	4602      	mov	r2, r0
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <DWT_Delay_us+0x40>)
 800175e:	fba3 2302 	umull	r2, r3, r3, r2
 8001762:	0c9b      	lsrs	r3, r3, #18
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	607b      	str	r3, [r7, #4]
 /* Delay till end */
 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800176c:	bf00      	nop
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <DWT_Delay_us+0x3c>)
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad2      	subs	r2, r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	429a      	cmp	r2, r3
 800177a:	d3f8      	bcc.n	800176e <DWT_Delay_us+0x26>
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	e0001000 	.word	0xe0001000
 8001788:	431bde83 	.word	0x431bde83

0800178c <hx711_single_read>:
    HAL_Delay(1000);

    zero = hx711_avg_read(16, 'a');
}

int32_t hx711_single_read(char channel) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
//    int32_t reading = 0;
//    int32_t old_reading = 0;
    int dem;
    old_reading = reading;
 8001796:	4b38      	ldr	r3, [pc, #224]	; (8001878 <hx711_single_read+0xec>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a38      	ldr	r2, [pc, #224]	; (800187c <hx711_single_read+0xf0>)
 800179c:	6013      	str	r3, [r2, #0]
    reading = 0;
 800179e:	4b36      	ldr	r3, [pc, #216]	; (8001878 <hx711_single_read+0xec>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017aa:	4835      	ldr	r0, [pc, #212]	; (8001880 <hx711_single_read+0xf4>)
 80017ac:	f7ff fbbf 	bl	8000f2e <HAL_GPIO_WritePin>
    switch (channel)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b61      	cmp	r3, #97	; 0x61
 80017b4:	d002      	beq.n	80017bc <hx711_single_read+0x30>
 80017b6:	2b62      	cmp	r3, #98	; 0x62
 80017b8:	d003      	beq.n	80017c2 <hx711_single_read+0x36>
 80017ba:	e005      	b.n	80017c8 <hx711_single_read+0x3c>
    {
    case 'a':
    	dem = 25;
 80017bc:	2319      	movs	r3, #25
 80017be:	613b      	str	r3, [r7, #16]
    	break;
 80017c0:	e002      	b.n	80017c8 <hx711_single_read+0x3c>
    case 'b':
    	dem = 26;
 80017c2:	231a      	movs	r3, #26
 80017c4:	613b      	str	r3, [r7, #16]
    	break;
 80017c6:	bf00      	nop
    }
    for (i = 0; i < 25; ++i) {
 80017c8:	2300      	movs	r3, #0
 80017ca:	75fb      	strb	r3, [r7, #23]
 80017cc:	e028      	b.n	8001820 <hx711_single_read+0x94>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1); //CLK
 80017ce:	2201      	movs	r2, #1
 80017d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d4:	482a      	ldr	r0, [pc, #168]	; (8001880 <hx711_single_read+0xf4>)
 80017d6:	f7ff fbaa 	bl	8000f2e <HAL_GPIO_WritePin>
    	DWT_Delay_us(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f7ff ffb4 	bl	8001748 <DWT_Delay_us>
        reading = reading << 1;
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <hx711_single_read+0xec>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4a24      	ldr	r2, [pc, #144]	; (8001878 <hx711_single_read+0xec>)
 80017e8:	6013      	str	r3, [r2, #0]
        uint8_t bit = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12); //Data
 80017ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ee:	4824      	ldr	r0, [pc, #144]	; (8001880 <hx711_single_read+0xf4>)
 80017f0:	f7ff fb86 	bl	8000f00 <HAL_GPIO_ReadPin>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
        if (bit)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <hx711_single_read+0x7c>
            reading++;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <hx711_single_read+0xec>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <hx711_single_read+0xec>)
 8001806:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800180e:	481c      	ldr	r0, [pc, #112]	; (8001880 <hx711_single_read+0xf4>)
 8001810:	f7ff fb8d 	bl	8000f2e <HAL_GPIO_WritePin>
        DWT_Delay_us(1);
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff ff97 	bl	8001748 <DWT_Delay_us>
    for (i = 0; i < 25; ++i) {
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	3301      	adds	r3, #1
 800181e:	75fb      	strb	r3, [r7, #23]
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	2b18      	cmp	r3, #24
 8001824:	d9d3      	bls.n	80017ce <hx711_single_read+0x42>
    }
    reading = reading << (32 - i);
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <hx711_single_read+0xec>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	f1c3 0320 	rsb	r3, r3, #32
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	4a10      	ldr	r2, [pc, #64]	; (8001878 <hx711_single_read+0xec>)
 8001836:	6013      	str	r3, [r2, #0]
    reading = (reading * 10 + old_reading*90)/100;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <hx711_single_read+0xec>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4619      	mov	r1, r3
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <hx711_single_read+0xf0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	225a      	movs	r2, #90	; 0x5a
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	440b      	add	r3, r1
 8001852:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <hx711_single_read+0xf8>)
 8001854:	fb82 1203 	smull	r1, r2, r2, r3
 8001858:	1152      	asrs	r2, r2, #5
 800185a:	17db      	asrs	r3, r3, #31
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	4a06      	ldr	r2, [pc, #24]	; (8001878 <hx711_single_read+0xec>)
 8001860:	6013      	str	r3, [r2, #0]
    reading1 = (uint32_t)reading;
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <hx711_single_read+0xec>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <hx711_single_read+0xfc>)
 800186a:	601a      	str	r2, [r3, #0]
    return reading;
 800186c:	4b02      	ldr	r3, [pc, #8]	; (8001878 <hx711_single_read+0xec>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000002c 	.word	0x2000002c
 800187c:	20000030 	.word	0x20000030
 8001880:	40010800 	.word	0x40010800
 8001884:	51eb851f 	.word	0x51eb851f
 8001888:	20000038 	.word	0x20000038

0800188c <hx711_avg_read>:

int32_t hx711_avg_read(uint8_t samples, char channel) {
 800188c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	460a      	mov	r2, r1
 8001898:	71fb      	strb	r3, [r7, #7]
 800189a:	4613      	mov	r3, r2
 800189c:	71bb      	strb	r3, [r7, #6]
    int64_t adc_data = 0;
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	f04f 0400 	mov.w	r4, #0
 80018a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    uint8_t i;

    for (i = 0; i < samples; ++i) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	e015      	b.n	80018dc <hx711_avg_read+0x50>
        adc_data += hx711_single_read(channel);
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff6a 	bl	800178c <hx711_single_read>
 80018b8:	4603      	mov	r3, r0
 80018ba:	469b      	mov	fp, r3
 80018bc:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80018c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80018c4:	eb1b 0301 	adds.w	r3, fp, r1
 80018c8:	eb4c 0402 	adc.w	r4, ip, r2
 80018cc:	e9c7 3404 	strd	r3, r4, [r7, #16]
        HAL_Delay(10);
 80018d0:	200a      	movs	r0, #10
 80018d2:	f7ff f8b5 	bl	8000a40 <HAL_Delay>
    for (i = 0; i < samples; ++i) {
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	3301      	adds	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d3e5      	bcc.n	80018b0 <hx711_avg_read+0x24>
    }
    adc_data /= samples;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f04f 0400 	mov.w	r4, #0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4623      	mov	r3, r4
 80018ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018f2:	f7fe fe89 	bl	8000608 <__aeabi_ldivmod>
 80018f6:	4603      	mov	r3, r0
 80018f8:	460c      	mov	r4, r1
 80018fa:	e9c7 3404 	strd	r3, r4, [r7, #16]
    return adc_data;
 80018fe:	693b      	ldr	r3, [r7, #16]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
	...

0800190c <hx711_read_gram>:

float hx711_read_gram(char channel) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
    int32_t read = hx711_avg_read(8, channel);
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	4619      	mov	r1, r3
 800191a:	2008      	movs	r0, #8
 800191c:	f7ff ffb6 	bl	800188c <hx711_avg_read>
 8001920:	60f8      	str	r0, [r7, #12]

    return (float)read / gram;
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f7fe fccc 	bl	80002c0 <__aeabi_i2f>
 8001928:	4602      	mov	r2, r0
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <hx711_read_gram+0x34>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f7fe fdcd 	bl	80004d0 <__aeabi_fdiv>
 8001936:	4603      	mov	r3, r0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000008 	.word	0x20000008

08001944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001948:	f7ff f818 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194c:	f000 f826 	bl	800199c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001950:	f000 f868 	bl	8001a24 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  hx711_single_read('a');
 8001954:	2061      	movs	r0, #97	; 0x61
 8001956:	f7ff ff19 	bl	800178c <hx711_single_read>
	  HAL_Delay(50);
 800195a:	2032      	movs	r0, #50	; 0x32
 800195c:	f7ff f870 	bl	8000a40 <HAL_Delay>
	  x = hx711_read_gram('a');
 8001960:	2061      	movs	r0, #97	; 0x61
 8001962:	f7ff ffd3 	bl	800190c <hx711_read_gram>
 8001966:	4602      	mov	r2, r0
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <main+0x50>)
 800196a:	601a      	str	r2, [r3, #0]
	  HAL_Delay(50);
 800196c:	2032      	movs	r0, #50	; 0x32
 800196e:	f7ff f867 	bl	8000a40 <HAL_Delay>
	  hx711_single_read('b');
 8001972:	2062      	movs	r0, #98	; 0x62
 8001974:	f7ff ff0a 	bl	800178c <hx711_single_read>
	  HAL_Delay(50);
 8001978:	2032      	movs	r0, #50	; 0x32
 800197a:	f7ff f861 	bl	8000a40 <HAL_Delay>
	  y = hx711_read_gram('b');
 800197e:	2062      	movs	r0, #98	; 0x62
 8001980:	f7ff ffc4 	bl	800190c <hx711_read_gram>
 8001984:	4602      	mov	r2, r0
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <main+0x54>)
 8001988:	601a      	str	r2, [r3, #0]
	  HAL_Delay(50);
 800198a:	2032      	movs	r0, #50	; 0x32
 800198c:	f7ff f858 	bl	8000a40 <HAL_Delay>
	  hx711_single_read('a');
 8001990:	e7e0      	b.n	8001954 <main+0x10>
 8001992:	bf00      	nop
 8001994:	2000003c 	.word	0x2000003c
 8001998:	20000040 	.word	0x20000040

0800199c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b090      	sub	sp, #64	; 0x40
 80019a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a2:	f107 0318 	add.w	r3, r7, #24
 80019a6:	2228      	movs	r2, #40	; 0x28
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f962 	bl	8001c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019be:	2301      	movs	r3, #1
 80019c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d0:	2302      	movs	r3, #2
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80019da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fabb 	bl	8000f60 <HAL_RCC_OscConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019f0:	f000 f860 	bl	8001ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f8:	2302      	movs	r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fd27 	bl	8001460 <HAL_RCC_ClockConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001a18:	f000 f84c 	bl	8001ab4 <Error_Handler>
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3740      	adds	r7, #64	; 0x40
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_GPIO_Init+0x88>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <MX_GPIO_Init+0x88>)
 8001a3e:	f043 0320 	orr.w	r3, r3, #32
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_GPIO_Init+0x88>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_GPIO_Init+0x88>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a15      	ldr	r2, [pc, #84]	; (8001aac <MX_GPIO_Init+0x88>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <MX_GPIO_Init+0x88>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a6e:	4810      	ldr	r0, [pc, #64]	; (8001ab0 <MX_GPIO_Init+0x8c>)
 8001a70:	f7ff fa5d 	bl	8000f2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
  //GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	4619      	mov	r1, r3
 8001a88:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <MX_GPIO_Init+0x8c>)
 8001a8a:	f7ff f8df 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  //GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <MX_GPIO_Init+0x8c>)
 8001aa0:	f7ff f8d4 	bl	8000c4c <HAL_GPIO_Init>

}
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010800 	.word	0x40010800

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_MspInit+0x5c>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <HAL_MspInit+0x5c>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6193      	str	r3, [r2, #24]
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_MspInit+0x5c>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_MspInit+0x5c>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_MspInit+0x5c>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_MspInit+0x5c>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_MspInit+0x60>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_MspInit+0x60>)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <HardFault_Handler+0x4>

08001b36 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <MemManage_Handler+0x4>

08001b3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <BusFault_Handler+0x4>

08001b42 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <UsageFault_Handler+0x4>

08001b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b70:	f7fe ff4a 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <SystemInit+0x5c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <SystemInit+0x5c>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <SystemInit+0x5c>)
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4911      	ldr	r1, [pc, #68]	; (8001bd4 <SystemInit+0x5c>)
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <SystemInit+0x60>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <SystemInit+0x5c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <SystemInit+0x5c>)
 8001b9a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <SystemInit+0x5c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <SystemInit+0x5c>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <SystemInit+0x5c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <SystemInit+0x5c>)
 8001bb6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001bba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <SystemInit+0x5c>)
 8001bbe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001bc2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <SystemInit+0x64>)
 8001bc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bca:	609a      	str	r2, [r3, #8]
#endif 
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	f8ff0000 	.word	0xf8ff0000
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001be0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001be2:	e003      	b.n	8001bec <LoopCopyDataInit>

08001be4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001be6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001be8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bea:	3104      	adds	r1, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bec:	480a      	ldr	r0, [pc, #40]	; (8001c18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bf0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bf2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bf4:	d3f6      	bcc.n	8001be4 <CopyDataInit>
  ldr r2, =_sbss
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bf8:	e002      	b.n	8001c00 <LoopFillZerobss>

08001bfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bfc:	f842 3b04 	str.w	r3, [r2], #4

08001c00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c04:	d3f9      	bcc.n	8001bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c06:	f7ff ffb7 	bl	8001b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f000 f80f 	bl	8001c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c0e:	f7ff fe99 	bl	8001944 <main>
  bx lr
 8001c12:	4770      	bx	lr
  ldr r3, =_sidata
 8001c14:	08001cd0 	.word	0x08001cd0
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c1c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001c20:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001c24:	20000044 	.word	0x20000044

08001c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC1_2_IRQHandler>
	...

08001c2c <__libc_init_array>:
 8001c2c:	b570      	push	{r4, r5, r6, lr}
 8001c2e:	2500      	movs	r5, #0
 8001c30:	4e0c      	ldr	r6, [pc, #48]	; (8001c64 <__libc_init_array+0x38>)
 8001c32:	4c0d      	ldr	r4, [pc, #52]	; (8001c68 <__libc_init_array+0x3c>)
 8001c34:	1ba4      	subs	r4, r4, r6
 8001c36:	10a4      	asrs	r4, r4, #2
 8001c38:	42a5      	cmp	r5, r4
 8001c3a:	d109      	bne.n	8001c50 <__libc_init_array+0x24>
 8001c3c:	f000 f822 	bl	8001c84 <_init>
 8001c40:	2500      	movs	r5, #0
 8001c42:	4e0a      	ldr	r6, [pc, #40]	; (8001c6c <__libc_init_array+0x40>)
 8001c44:	4c0a      	ldr	r4, [pc, #40]	; (8001c70 <__libc_init_array+0x44>)
 8001c46:	1ba4      	subs	r4, r4, r6
 8001c48:	10a4      	asrs	r4, r4, #2
 8001c4a:	42a5      	cmp	r5, r4
 8001c4c:	d105      	bne.n	8001c5a <__libc_init_array+0x2e>
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c54:	4798      	blx	r3
 8001c56:	3501      	adds	r5, #1
 8001c58:	e7ee      	b.n	8001c38 <__libc_init_array+0xc>
 8001c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c5e:	4798      	blx	r3
 8001c60:	3501      	adds	r5, #1
 8001c62:	e7f2      	b.n	8001c4a <__libc_init_array+0x1e>
 8001c64:	08001cc8 	.word	0x08001cc8
 8001c68:	08001cc8 	.word	0x08001cc8
 8001c6c:	08001cc8 	.word	0x08001cc8
 8001c70:	08001ccc 	.word	0x08001ccc

08001c74 <memset>:
 8001c74:	4603      	mov	r3, r0
 8001c76:	4402      	add	r2, r0
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d100      	bne.n	8001c7e <memset+0xa>
 8001c7c:	4770      	bx	lr
 8001c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c82:	e7f9      	b.n	8001c78 <memset+0x4>

08001c84 <_init>:
 8001c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c86:	bf00      	nop
 8001c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8a:	bc08      	pop	{r3}
 8001c8c:	469e      	mov	lr, r3
 8001c8e:	4770      	bx	lr

08001c90 <_fini>:
 8001c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c92:	bf00      	nop
 8001c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c96:	bc08      	pop	{r3}
 8001c98:	469e      	mov	lr, r3
 8001c9a:	4770      	bx	lr
